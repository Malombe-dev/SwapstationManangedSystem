{"ast":null,"code":"// import axios from 'axios';\n\n// const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// const api = axios.create({\n//   baseURL: API_BASE_URL,\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\n// // Riders API\n// export const ridersAPI = {\n//   getAll: (page = 1, limit = 10) => api.get(`/riders?page=${page}&limit=${limit}`),\n//   getById: (id) => api.get(`/riders/${id}`),\n//   create: (data) => api.post('/riders', data),\n//   update: (id, data) => api.put(`/riders/${id}`, data),\n//   delete: (id) => api.delete(`/riders/${id}`),\n// };\n\n// // Swaps API\n// export const swapsAPI = {\n//   getAll: (page = 1, limit = 10) => api.get(`/swaps?page=${page}&limit=${limit}`),\n//   create: (data) => api.post('/swaps', data),\n//   getAnalytics: (startDate, endDate) => api.get(`/swaps/analytics?startDate=${startDate}&endDate=${endDate}`),\n// };\n\n// // Analytics API\n// export const analyticsAPI = {\n//   getDashboard: () => api.get('/analytics/dashboard'),\n//   getChurnPredictions: () => api.get('/analytics/churn'),\n//   getSwapForecast: (location, days) => api.get(`/analytics/forecast?location=${location}&days=${days}`),\n// };\n\n// export default api;\n\n// frontend/src/services/api.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  async makeRequest(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'API request failed');\n      }\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Rider API methods\n  async getRiders(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.makeRequest(`/riders?${queryString}`);\n  }\n  async getRiderById(id) {\n    return this.makeRequest(`/riders/${id}`);\n  }\n  async createRider(riderData) {\n    return this.makeRequest('/riders', {\n      method: 'POST',\n      body: JSON.stringify(riderData)\n    });\n  }\n  async updateRider(id, riderData) {\n    return this.makeRequest(`/riders/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(riderData)\n    });\n  }\n  async deleteRider(id) {\n    return this.makeRequest(`/riders/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Swap API methods\n  async getSwaps(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.makeRequest(`/swaps?${queryString}`);\n  }\n  async getSwapsByRider(riderId) {\n    return this.makeRequest(`/swaps/rider/${riderId}`);\n  }\n  async createSwap(swapData) {\n    return this.makeRequest('/swaps', {\n      method: 'POST',\n      body: JSON.stringify(swapData)\n    });\n  }\n\n  // Analytics API methods\n  async getDashboardStats() {\n    return this.makeRequest('/analytics/dashboard');\n  }\n  async getChurnPrediction() {\n    return this.makeRequest('/analytics/churn-prediction');\n  }\n  async getSwapForecast(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.makeRequest(`/analytics/swap-forecast?${queryString}`);\n  }\n  async getLocationAnalytics() {\n    return this.makeRequest('/analytics/location-stats');\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","makeRequest","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","message","error","console","getRiders","params","queryString","URLSearchParams","toString","getRiderById","id","createRider","riderData","method","body","JSON","stringify","updateRider","deleteRider","getSwaps","getSwapsByRider","riderId","createSwap","swapData","getDashboardStats","getChurnPrediction","getSwapForecast","getLocationAnalytics"],"sources":["/home/malombe/Documents/SWapsystem /SWapsystem-frontend/src/services/api.js"],"sourcesContent":["// import axios from 'axios';\n\n// const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// const api = axios.create({\n//   baseURL: API_BASE_URL,\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\n// // Riders API\n// export const ridersAPI = {\n//   getAll: (page = 1, limit = 10) => api.get(`/riders?page=${page}&limit=${limit}`),\n//   getById: (id) => api.get(`/riders/${id}`),\n//   create: (data) => api.post('/riders', data),\n//   update: (id, data) => api.put(`/riders/${id}`, data),\n//   delete: (id) => api.delete(`/riders/${id}`),\n// };\n\n// // Swaps API\n// export const swapsAPI = {\n//   getAll: (page = 1, limit = 10) => api.get(`/swaps?page=${page}&limit=${limit}`),\n//   create: (data) => api.post('/swaps', data),\n//   getAnalytics: (startDate, endDate) => api.get(`/swaps/analytics?startDate=${startDate}&endDate=${endDate}`),\n// };\n\n// // Analytics API\n// export const analyticsAPI = {\n//   getDashboard: () => api.get('/analytics/dashboard'),\n//   getChurnPredictions: () => api.get('/analytics/churn'),\n//   getSwapForecast: (location, days) => api.get(`/analytics/forecast?location=${location}&days=${days}`),\n// };\n\n// export default api;\n\n// frontend/src/services/api.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass ApiService {\n  async makeRequest(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.message || 'API request failed');\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Rider API methods\n  async getRiders(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.makeRequest(`/riders?${queryString}`);\n  }\n\n  async getRiderById(id) {\n    return this.makeRequest(`/riders/${id}`);\n  }\n\n  async createRider(riderData) {\n    return this.makeRequest('/riders', {\n      method: 'POST',\n      body: JSON.stringify(riderData),\n    });\n  }\n\n  async updateRider(id, riderData) {\n    return this.makeRequest(`/riders/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(riderData),\n    });\n  }\n\n  async deleteRider(id) {\n    return this.makeRequest(`/riders/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Swap API methods\n  async getSwaps(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.makeRequest(`/swaps?${queryString}`);\n  }\n\n  async getSwapsByRider(riderId) {\n    return this.makeRequest(`/swaps/rider/${riderId}`);\n  }\n\n  async createSwap(swapData) {\n    return this.makeRequest('/swaps', {\n      method: 'POST',\n      body: JSON.stringify(swapData),\n    });\n  }\n\n  // Analytics API methods\n  async getDashboardStats() {\n    return this.makeRequest('/analytics/dashboard');\n  }\n\n  async getChurnPrediction() {\n    return this.makeRequest('/analytics/churn-prediction');\n  }\n\n  async getSwapForecast(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.makeRequest(`/analytics/swap-forecast?${queryString}`);\n  }\n\n  async getLocationAnalytics() {\n    return this.makeRequest('/analytics/location-stats');\n  }\n}\n\nexport default new ApiService();"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,UAAU,CAAC;EACf,MAAMC,WAAWA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxC,MAAMC,GAAG,GAAG,GAAGR,YAAY,GAAGM,QAAQ,EAAE;IACxC,MAAMG,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MACzC,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,oBAAoB,CAAC;MACvD;MAEA,OAAOJ,IAAI;IACb,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,SAASA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IAC3B,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC1D,OAAO,IAAI,CAACnB,WAAW,CAAC,WAAWiB,WAAW,EAAE,CAAC;EACnD;EAEA,MAAMG,YAAYA,CAACC,EAAE,EAAE;IACrB,OAAO,IAAI,CAACrB,WAAW,CAAC,WAAWqB,EAAE,EAAE,CAAC;EAC1C;EAEA,MAAMC,WAAWA,CAACC,SAAS,EAAE;IAC3B,OAAO,IAAI,CAACvB,WAAW,CAAC,SAAS,EAAE;MACjCwB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS;IAChC,CAAC,CAAC;EACJ;EAEA,MAAMK,WAAWA,CAACP,EAAE,EAAEE,SAAS,EAAE;IAC/B,OAAO,IAAI,CAACvB,WAAW,CAAC,WAAWqB,EAAE,EAAE,EAAE;MACvCG,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS;IAChC,CAAC,CAAC;EACJ;EAEA,MAAMM,WAAWA,CAACR,EAAE,EAAE;IACpB,OAAO,IAAI,CAACrB,WAAW,CAAC,WAAWqB,EAAE,EAAE,EAAE;MACvCG,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMM,QAAQA,CAACd,MAAM,GAAG,CAAC,CAAC,EAAE;IAC1B,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC1D,OAAO,IAAI,CAACnB,WAAW,CAAC,UAAUiB,WAAW,EAAE,CAAC;EAClD;EAEA,MAAMc,eAAeA,CAACC,OAAO,EAAE;IAC7B,OAAO,IAAI,CAAChC,WAAW,CAAC,gBAAgBgC,OAAO,EAAE,CAAC;EACpD;EAEA,MAAMC,UAAUA,CAACC,QAAQ,EAAE;IACzB,OAAO,IAAI,CAAClC,WAAW,CAAC,QAAQ,EAAE;MAChCwB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,QAAQ;IAC/B,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMC,iBAAiBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAACnC,WAAW,CAAC,sBAAsB,CAAC;EACjD;EAEA,MAAMoC,kBAAkBA,CAAA,EAAG;IACzB,OAAO,IAAI,CAACpC,WAAW,CAAC,6BAA6B,CAAC;EACxD;EAEA,MAAMqC,eAAeA,CAACrB,MAAM,GAAG,CAAC,CAAC,EAAE;IACjC,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC1D,OAAO,IAAI,CAACnB,WAAW,CAAC,4BAA4BiB,WAAW,EAAE,CAAC;EACpE;EAEA,MAAMqB,oBAAoBA,CAAA,EAAG;IAC3B,OAAO,IAAI,CAACtC,WAAW,CAAC,2BAA2B,CAAC;EACtD;AACF;AAEA,eAAe,IAAID,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}